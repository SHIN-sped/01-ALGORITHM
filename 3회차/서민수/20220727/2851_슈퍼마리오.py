# 문제
# 슈퍼 마리오 앞에 10개의 버섯이 일렬로 놓여져 있다. 이 버섯을 먹으면 점수를 받는다.

# 슈퍼 마리오는 버섯을 처음부터 나온 순서대로 집으려고 한다. 하지만, 모든 버섯을 집을 필요는 없고 중간에 중단할 수 있다. 중간에 버섯을 먹는 것을 중단했다면, 그 이후에 나온 버섯은 모두 먹을 수 없다. 따라서 첫 버섯을 먹지 않았다면, 그 이후 버섯도 모두 먹을 수 없다.

# 마리오는 받은 점수의 합을 최대한 100에 가깝게 만들려고 한다.

# 버섯의 점수가 주어졌을 때, 마리오가 받는 점수를 출력하는 프로그램을 작성하시오.

# 입력
# 총 10개의 줄에 각각의 버섯의 점수가 주어진다. 이 값은 100보다 작거나 같은 양의 정수이다. 버섯이 나온 순서대로 점수가 주어진다.

# 출력
# 첫째 줄에 마리오가 받는 점수를 출력한다. 만약 100에 가까운 수가 2개라면 (예: 98, 102) 마리오는 큰 값을 선택한다.

# 예제 입력 1 
# 10
# 20
# 30
# 40
# 50
# 60
# 70
# 80
# 90
# 100

# 처음부터 나온 순서대로 집으려고 한다.
# 중간에 중단할 수 있다.
# 그 이후에 나온 버섯은 모두 먹을 수 없다. 첫 버섯을 먹지 않다면 
# 누적합 순서대로 증가한다
# 합을 최대한 100에 가깝게 

# 누적점수 구하는법
# 누적점수 = 0
# for 점수 in 점수리스트
# 누적점수 += 점수 
# 차이 = abs(100 - 누적점수)
# if 차이 <= 가장작은차이
# 가장작은차이 = 차이
# 가장큰누적점수 = 누적점수


mush_list = [] # 버섯을 받아 줄 리스트
score = 0 # 점수합계를 위한 변수
for i in range(10): # 0~9 까지 총 10개의 버섯
    mush_list.append(int(input())) #받은 버섯의 점수를 리스트에 추가
    
for j in mush_list: # 받아온 버섯들을
    score += j # j에 담긴 버섯들을 스코어에 더해준다
    # print(score)
    if score >= 100: # score가 100과 같거나 클 때
        if score - 100 > 100-(score-j): # score - 100이 100 - (score-j) 보다 크다면 100 - 100,  150 - 100 > 100-(150-50)  50 > 0 조건만족
           # print(score) score는 150
            # print(j) 10 20 30 40 50 60 70 80 90 100 j는 50
            score -= j #score 점수에서 j를 빼라 150 - 50
            break # 탈출
print(score)
    

# 2번째

n = 10 # 10개의 정수

scores = [] #점수 저장 리스트
for i in range(n):
    score = int(input()) # 숫자형 입력
    scores.append(score)

sum = 0
# 가장 작은 차이
min_ = 10e9
#ㄱ 가장 큰 누적점수
max_ = 0

for i in range(n):
    sum_ = sum_ + scores[i] # 누적 합

    # 누적 점수와 100의 차이
    diff = abs( 100 - sum_ )

    # 차이가 이전의 가장 작은차이 보다 작을 때
    if diff <= min_:
        # 가장 작은 차이와 가장 큰  누적점수를 갱신한다
        min_ = diff
        max = sum_
# 가장 100과 가장 가까운 누적 점수
print(max_)