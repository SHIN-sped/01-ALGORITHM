# 괄호 문자열1Parenthesis String, PS)은 두 개의 괄호 기호인 ‘(’ 와 ‘)’ 만으로 구성되어 있는 문자열이다. 그 중에서 괄호의 모양이 바르게 구성된 문자열을 올바른 괄호 문자열(Valid PS, VPS)이라고 부른다. 한 쌍의 괄호 기호로 된 “( )” 문자열은 기본 VPS 이라고 부른다. 만일 x 가 VPS 라면 이것을 하나의 괄호에 넣은 새로운 문자열 “(x)”도 VPS 가 된다. 그리고 두 VPS x 와 y를 접합(concatenation)시킨 새로운 문자열 xy도 VPS 가 된다. 예를 들어 “(())()”와 “((()))” 는 VPS 이지만 “(()(”, “(())()))” , 그리고 “(()” 는 모두 VPS 가 아닌 문자열이다. 

# 여러분은 입력으로 주어진 괄호 문자열이 VPS 인지 아닌지를 판단해서 그 결과를 YES 와 NO 로 나타내어야 한다. 
# import sys
# sys.stdin = open("input.txt", "r")

# 접근 방법 =  1.괄호가 시작되기 위해서는 왼쪽괄호가 먼저 존재해야한다 
#             2. 인덱스가 순환될 때, 왼쪽 괄호보다 오른쪽 괄호의 갯수가 더 많다면 바르지 않은 구조이다.
#             3. '('를 1로 지정하고 ')'를 -1로 지정한다면 쉽게 풀릴거같다 .  FOR문이 끝났을 때 양괄호의 숫자는 동일해야하고
#                 중간에 오른쪽 괄호의 수가 더 많다면 중지되어야한다 이를 기준점을 COUNT로 해놓고 중간에 COUNT가 0이하로 떨어지면 중지
#                 마지막에 COUNT가 0 이 아니라면 괄호의 짝이 안맞으므로 NO로 표시  , 0이라면 괄호구조가 잘 구성되어있음으로 YES로 표시한다.

n = int(input()) 

for __ in range(n): # n번만큼 테스트를 시행한다.
    ps = input ()
    psls= list(ps)  # 받은 값을 한개씩 for문을 돌리기위해 리스트화 시킨다. # 굳이 리스트안해도 됬을듯,
    count=0         # 괄호의 양 날개를 카운팅할 수 있는 기준점으로 카운트 변수에 0을 넣는다.
    for i in psls:
        if i == '(':    # 왼쪽 괄호라면 카운터에 +1 
            count+=1
        elif i == ')': # 오른쪽 괄호라면 카운터에 -1  ( )) 
            count-=1
        if count < 0: # 만일 카운터가 0미만(음수)으로로 떨어지면 왼쪽괄호보다 오른쪽 괄호의 수가 많아지기에 구조성립이 안되기에 no를 출력
            print('NO')
            break
    if count == 0:    # 카운터가 0일시 양쪽 괄호의 수가 맞고 구조성립이 된 상태임을 확인 할 수 있음 YES출력
        print('YES')
    elif count >= 1: # 카운터가 0 초과일시 왼쪽 괄호의 수가 많으므로 구조성립이 안된다 NO를 출력 
        print('NO')

