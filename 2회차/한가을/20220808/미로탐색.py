# 2178
# N * M 크기의 배열로 표현되는 미로가 있다
# 미로에서 1은 이동할 수 있는 칸을 나타내고 0은 이동할 수 없는 칸
# 미로가 주어졌을 때 (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때
# 지나야 하는 최소의 칸 수를 구하는 프로그램 작성
# 다른 칸으로 이동할 때 서로 인접한 칸으로만 이동할 수 있다
# 칸을 셀 때는 시작 위치와 도착 위치도 포함

# 첫째 줄에 두 정수 N, M이 주어진다
# 다음 N개의 줄에는 M개의 정수로 미로가 주어진다

import sys
sys.stdin = open('미로탐색.txt')

n, m = map(int, input().split())
s = []
queue = []
dx = [1, -1, 0, 0]
dy = [0, 0, -1, 1]

for i in range(n):
    s.append(list(input()))

queue = [[0, 0]]
s[0][0] = 1

while queue:
    a, b = queue[0][0], queue[0][1]
    del queue[0]

    for i in range(4):
        x = a + dx[i]
        y = b + dy[i]

        if 0 <= x < n and 0 <= y < m and s[x][y] == "1":
            queue.append([x, y])
            s[x][y] = s[a][b] + 1

print(s[n - 1][m - 1])


#? print(s)를 하면
#? [1, '0', 9, 10, 11, 12]
#? [2, '0', 8, '0', 12, '0']
#? [3, '0', 7, '0', 13, 14]
#? [4,  5,  6, '0', 14, 15] 출력

#? 0,0부터 bfs를 이용해 동서남북 검사하여 '1'인 값을 찾는다
#? 만약 '1'이라면 기준이 되는 숫자에 +1을 하여 값을 넣는다
#? 마지막 s[n - 1, m - 1]에는 최솟값이 들어간다