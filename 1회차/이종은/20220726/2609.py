# # 두 개의 자연수를 입력받아 최대 공약수와 최소 공배수를 출력하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에는 두 개의 자연수가 주어진다. 이 둘은 10,000이하의 자연수이며 사이에 한 칸의 공백이 주어진다.
# 최대 공약수 : 두 수 이상의 여러 수의 공통된 약수를 의미, 그 중 최대값
# 출력
# 첫째 줄에는 입력으로 주어진 두 수의 최대공약수를, 둘째 줄에는 입력으로 주어진 두 수의 최소 공배수를 출력한다.

a, b = map(int, input().split())

def gcd(a, b):
    if b == 0: # 0이면 a 값 반환
        return a 
    return gcd(b, a % b) # 0이 아니면 b값과 a에서 b를 나누었을 때 나머지 반환
    # b에 0 이 나올 때까지 쭉 돌리다가 0이나오면 a반환하고 gcd(a,b)가 6이됨
    
print(gcd(a, b)) #6 => 최대 공약수이며, a에 b를 나눈 나머지 값이 최대공약수가 됨
print(a*b//gcd(a, b)) #24*18/6=72 => 최소 공배수
#a,b를 곱하고 최대공약수로 나눈 값이 최소 공배수 

#유클리드 호제법(Euclidean algorithm)-최대공약수
# 원리 : a, b의 최대공약수 == b와 a%b의 최대공약수
# -> GCD(a, b) = GCD(b, a%b)
# a%b가 0이 될 경우 해당 b가 최대공약수이다.
# ex) GCD(24, 18) = GCD(18, 6) = GCD(6, 0)
# 마지막에 a%b가 0이 되었기 때문에 24와 18의 GCD는 6이다. 

#방법2
n1,n2=map(int,input().split())
GCD=1
LCM=1
n=2
while n<=n1 and n<=n2:
  if n1%n==0 and n2%n==0:
    GCD,n1,n2 = GCD*n, n1//n, n2//n #각 변수에 연산자 할당
  else :
    n+=1

LCM=(n1*n2)*GCD
print(GCD) #최대공약수 
print(LCM)
