# 4396.
"""

"""
from pprint import pprint

델타y = [-1, -1, -1, 0, 0, 1, 1, 1]
델타x = [-1, 0, 1, -1, 1, -1, 0, 1]

지뢰 = "*"
빈공간 = "."
n = 8
게임보드 = [
    '...**..*',
    '......*.',
    '....*...',
    '........',
    '........',
    '.....*..',
    '...**.*.',
    '.....*..']
오픈보드 = [
    'xxx.....',
    'xxxx....',
    'xxxx....',
    'xxxxx...',
    'xxxxx...',
    'xxxxx...',
    'xxx.....',
    'xxxxx...'
    ]
결과보드 = []
for _ in range(n):
    결과보드.append(['.'] * n)
    # temp = ['.'] * 8
    # 결과보드.append(temp)

게임보드 = list(게임보드)
오픈보드 = list(오픈보드)

지뢰발견 = False
# 이중반복문
for r in range(n):
    for c in range(n):
        # 현재 위치가 오픈한 위치
        # 오픈보드 - > 'x'인 애들만 탐색
        if 오픈보드[r][c] == 'x':
#         print(r,c)
#     print("-----------")
        # print(r, c)
        # c를 반복할때마다 지뢰수를 체크
            지뢰수 = 0
            for d in range(8):
                탐색r = r + 델타y[d]
                탐색c = c + 델타x[d]
                # print(탐색r, 탐색c)
                
                # 탐색r과 탐색c의 범위는 리스트의 범위를 벗어나면 안됨.
                # 리스트의 범위는 0 ~ 7(리스트의 길이 8)
                if 0 <= 탐색r <= n - 1 and 0 <= 탐색c <= n - 1:
                    if 게임보드[탐색r][탐색c] == 지뢰:
                        지뢰수 += 1
            결과보드[r][c] = 지뢰수
            # 현재 오픈한 위치<오픈보드[r][c] == 'x'>에 지뢰가 있는지 확인
            # 현재 오픈한 위치가 지뢰라면 지뢰발견 True
            if 게임보드[r][c] == 지뢰:
                지뢰발견 = True

# 지뢰 발견했으면 모든 지뢰의 위치를 결과보드에 표시
if 지뢰발견 == True:
    for r in range(n):
        for c in range(n):
            if 게임보드[r][c] == 지뢰:
                결과보드[r][c] == 지뢰
pprint(결과보드)
    

    