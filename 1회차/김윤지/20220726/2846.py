# 상근이는 자전거를 타고 등교한다. 자전거 길은 오르막길, 내리막길, 평지로 이루어져 있다. 
# 상근이는 개강 첫 날 자전거를 타고 가면서 일정 거리마다 높이를 측정했다. 
# 상근이는 가장 큰 오르막길의 크기를 구하려고 한다.
# 측정한 높이는 길이가 N인 수열로 나타낼 수 있다. 
# 여기서 오르막길은 적어도 2개의 수로 이루어진 높이가 증가하는 부분 수열이다. 
# 오르막길의 크기는 부분 수열의 첫 번째 숫자와 마지막 숫자의 차이이다.
# 예를 들어, 높이가 다음과 같은 길이 있다고 하자. 12 3 5 7 10 6 1 11. 
# 이 길에는 2 개의 오르막길이 있다. 밑 줄로 표시된 부분 수열이 오르막길이다. 
# 첫 번째 오르막길의 크기는 7이고, 두 번째 오르막길의 크기는 10이다. 
# 높이가 12와 6인 곳은 오르막길에 속하지 않는다.
# 가장 큰 오르막길을 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 상근이가 측정한 높이의 수이자 수열의 크기인 N(1 ≤ N ≤ 1000)이 주어진다. 
# 둘째 줄에는 N개의 양의 정수 Pi(1 ≤ Pi ≤ 1000)가 주어진다. 
# 각 숫자는 상근이가 측정한 높이이다.

# 출력
# 첫째 줄에 가장 큰 오르막길의 크기를 출력한다. 만약 오르막길이 없는 경우에는 0을 출력한다.

n = int(input())   #수열길이
arr = list(map(int,input().split()))  #수열받기

up = 0   #오르막길 크기
up_arr = []  #오르막길 길이측정

for i in range(1, n):
    if arr[i] > arr[i-1]:        #수열 1번째보다 2번째가 더 크면 / 앞길보다 뒷길이 크면
        up += arr[i] - arr[i-1]  #두값의 차를 오르막길 크기에 더해주기   # 1 2 3 ---> 1+1
        if i == n - 1:           #수열 맨끝에 도달하면
            up_arr.append(up)    #print(up_arr)  [1,5]

    else:                        #내리막길인 경우
        up_arr.append(up)        #0으로 계산하기
        up = 0
print(max(up_arr)) # 가장 큰 오르막길의 크기 출력